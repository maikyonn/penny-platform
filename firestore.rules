rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function inOrg(orgId) {
      return isSignedIn() &&
        exists(/databases/$(database)/documents/orgs/$(orgId)/members/$(request.auth.uid));
    }

    // USERS
    match /users/{uid} {
      allow read: if isUser(uid) || isAdmin();
      allow create: if isUser(uid);
      allow update: if isUser(uid);
      allow delete: if false;

      match /integrations/{provider} {
        allow read, write: if isUser(uid) || isAdmin();
      }
    }

    // ORGS
    match /orgs/{orgId} {
      allow read: if inOrg(orgId) || isAdmin();
      allow create: if isAdmin();
      allow update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.ownerUid);

      match /members/{uid} {
        allow read: if inOrg(orgId) || isAdmin();
        allow write: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.ownerUid);
      }

      match /invites/{inviteId} {
        allow read: if inOrg(orgId) || isAdmin();
        allow create, update, delete: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.ownerUid);
      }
    }

    // GLOBAL INFLUENCERS
    match /influencers/{influencerId} {
      allow read: if isSignedIn();
      allow write, delete: if isAdmin();
    }

    // SEARCH JOBS
    match /search_jobs/{jobId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.createdByUid || isAdmin();
    }

    // OUTREACH CAMPAIGNS
    match /outreach_campaigns/{campaignId} {
      allow read, create: if isSignedIn();
      allow update, delete: if isSignedIn() && (
        request.auth.uid == resource.data.ownerUid ||
        (resource.data.orgId != null && inOrg(resource.data.orgId))
      );

      match /targets/{targetId} {
        allow read: if isSignedIn() && (
          request.auth.uid == resource.data.ownerUid ||
          (resource.data.orgId != null && inOrg(resource.data.orgId))
        );
        allow create, update: if isSignedIn() && request.auth.uid == resource.data.ownerUid;
        allow delete: if false;
      }
    }

    // THREADS & MESSAGES
    match /threads/{threadId} {
      allow read: if isSignedIn() &&
        (request.auth.uid == resource.data.userId ||
          (resource.data.orgId != null && inOrg(resource.data.orgId)));
      allow create, update, delete: if isAdmin();

      match /messages/{messageId} {
        allow read: if isSignedIn() &&
          (request.auth.uid == resource.data.userId ||
            (resource.data.orgId != null && inOrg(resource.data.orgId)));
        allow create, update, delete: if isAdmin();
      }
    }

    // EMAIL QUEUE
    match /email_queue/{queueId} {
      allow read: if isAdmin() || (isSignedIn() && request.auth.uid == resource.data.userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAdmin();
    }

    // SUPPRESSION
    match /suppression/{suppressionId} {
      allow read, write, delete: if isAdmin();
    }

    // WEBHOOK EVENTS
    match /webhook_events/{eventId} {
      allow read, write: if isAdmin();
    }

    // CONFIG
    match /config/{configId} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
  }
}
